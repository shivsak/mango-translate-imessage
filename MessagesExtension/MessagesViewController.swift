//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Shiv Sakhuja on 6/23/17.
//  Copyright Â© 2017 Shiv Sakhuja. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UITextFieldDelegate {
    
    var textField:UITextField = UITextField.init()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        setupView()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    func setupView() {
        setupTextField()
    }
    
    func setupTextField() {
        self.textField = UITextField(frame: CGRect(
            x:10,
            y:10,
            width:self.view.frame.size.width - 20,
            height: 50))
        self.textField.font = UIFont(name: "HelveticaNeue-Light", size: 18.0)
        self.textField.textColor = UIColor.black.withAlphaComponent(0.65)
        self.textField.borderStyle = .none
        self.textField.backgroundColor = UIColor.black.withAlphaComponent(0.08)
        self.textField.layer.cornerRadius = 6.0
        self.textField.tag = 99 // dummy
        self.textField.delegate = self
        self.view.addSubview(textField)
    }
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        if (textField.tag != 99) {
            return true
        } else {
            self.requestPresentationStyle(.expanded)
            return false
        }
    }
    
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        switch presentationStyle {
            case .compact:
                switchToCompactView()
            case .expanded:
                switchToExpandedView()
            default:
                break;
        }
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    private func composeMessage(_ sender:AnyObject) {
        let conversation = self.activeConversation
        conversation?.insertText("Je suis fracais", completionHandler: {
            error in
            self.logError(error: "Could not insert text into your conversation. \(String(describing: error))")
        })
    }
    
    func switchToCompactView() {
        // reposition text field
        // show language to picker
        // hide done button
        // show send button
    }
    
    func switchToExpandedView() {
        // reposition text field
        // hide language to picker
        // show done button
        // show send button
    }
    
    func logError(error: String) {
        print("oops \(error)")
    }

}
